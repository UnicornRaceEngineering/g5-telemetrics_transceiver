# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_canparser', [dirname(__file__)])
        except ImportError:
            import _canparser
            return _canparser
        if fp is not None:
            try:
                _mod = imp.load_module('_canparser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _canparser = swig_import_helper()
    del swig_import_helper
else:
    import _canparser
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class config_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _canparser.config_t_name_set
    __swig_getmethods__["name"] = _canparser.config_t_name_get
    if _newclass:name = _swig_property(_canparser.config_t_name_get, _canparser.config_t_name_set)
    __swig_setmethods__["id"] = _canparser.config_t_id_set
    __swig_getmethods__["id"] = _canparser.config_t_id_get
    if _newclass:id = _swig_property(_canparser.config_t_id_get, _canparser.config_t_id_set)
    __swig_setmethods__["rounddec"] = _canparser.config_t_rounddec_set
    __swig_getmethods__["rounddec"] = _canparser.config_t_rounddec_get
    if _newclass:rounddec = _swig_property(_canparser.config_t_rounddec_get, _canparser.config_t_rounddec_set)
    __swig_setmethods__["datalength"] = _canparser.config_t_datalength_set
    __swig_getmethods__["datalength"] = _canparser.config_t_datalength_get
    if _newclass:datalength = _swig_property(_canparser.config_t_datalength_get, _canparser.config_t_datalength_set)
    __swig_setmethods__["max"] = _canparser.config_t_max_set
    __swig_getmethods__["max"] = _canparser.config_t_max_get
    if _newclass:max = _swig_property(_canparser.config_t_max_get, _canparser.config_t_max_set)
    __swig_setmethods__["min"] = _canparser.config_t_min_set
    __swig_getmethods__["min"] = _canparser.config_t_min_get
    if _newclass:min = _swig_property(_canparser.config_t_min_get, _canparser.config_t_min_set)
    __swig_setmethods__["conv"] = _canparser.config_t_conv_set
    __swig_getmethods__["conv"] = _canparser.config_t_conv_get
    if _newclass:conv = _swig_property(_canparser.config_t_conv_get, _canparser.config_t_conv_set)
    def __init__(self): 
        this = _canparser.new_config_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _canparser.delete_config_t
    __del__ = lambda self : None;
config_t_swigregister = _canparser.config_t_swigregister
config_t_swigregister(config_t)


def stdConv(*args):
  return _canparser.stdConv(*args)
stdConv = _canparser.stdConv

def StatusLambdaV2Conv(*args):
  return _canparser.StatusLambdaV2Conv(*args)
StatusLambdaV2Conv = _canparser.StatusLambdaV2Conv

def airAndWaterTempConv(*args):
  return _canparser.airAndWaterTempConv(*args)
airAndWaterTempConv = _canparser.airAndWaterTempConv

def potmeterConvert(*args):
  return _canparser.potmeterConvert(*args)
potmeterConvert = _canparser.potmeterConvert

def rpmConv(*args):
  return _canparser.rpmConv(*args)
rpmConv = _canparser.rpmConv

def mBarConv(*args):
  return _canparser.mBarConv(*args)
mBarConv = _canparser.mBarConv

def batteryConv(*args):
  return _canparser.batteryConv(*args)
batteryConv = _canparser.batteryConv

def StatusLambdaV2Conv2(*args):
  return _canparser.StatusLambdaV2Conv2(*args)
StatusLambdaV2Conv2 = _canparser.StatusLambdaV2Conv2

def InjectorAndIgnitionTimeConv(*args):
  return _canparser.InjectorAndIgnitionTimeConv(*args)
InjectorAndIgnitionTimeConv = _canparser.InjectorAndIgnitionTimeConv

def GXGYGZconv(*args):
  return _canparser.GXGYGZconv(*args)
GXGYGZconv = _canparser.GXGYGZconv

def gearboardTempConv(*args):
  return _canparser.gearboardTempConv(*args)
gearboardTempConv = _canparser.gearboardTempConv

def waterInOutletTemoConv(*args):
  return _canparser.waterInOutletTemoConv(*args)
waterInOutletTemoConv = _canparser.waterInOutletTemoConv

def gearNeutralConv(*args):
  return _canparser.gearNeutralConv(*args)
gearNeutralConv = _canparser.gearNeutralConv
CONFIG_LENGTH = _canparser.CONFIG_LENGTH
class parser_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parser_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parser_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["package_start_counter"] = _canparser.parser_t_package_start_counter_set
    __swig_getmethods__["package_start_counter"] = _canparser.parser_t_package_start_counter_get
    if _newclass:package_start_counter = _swig_property(_canparser.parser_t_package_start_counter_get, _canparser.parser_t_package_start_counter_set)
    __swig_setmethods__["package_start"] = _canparser.parser_t_package_start_set
    __swig_getmethods__["package_start"] = _canparser.parser_t_package_start_get
    if _newclass:package_start = _swig_property(_canparser.parser_t_package_start_get, _canparser.parser_t_package_start_set)
    __swig_setmethods__["bytesToRead"] = _canparser.parser_t_bytesToRead_set
    __swig_getmethods__["bytesToRead"] = _canparser.parser_t_bytesToRead_get
    if _newclass:bytesToRead = _swig_property(_canparser.parser_t_bytesToRead_get, _canparser.parser_t_bytesToRead_set)
    __swig_setmethods__["valOut"] = _canparser.parser_t_valOut_set
    __swig_getmethods__["valOut"] = _canparser.parser_t_valOut_get
    if _newclass:valOut = _swig_property(_canparser.parser_t_valOut_get, _canparser.parser_t_valOut_set)
    __swig_setmethods__["confIndex"] = _canparser.parser_t_confIndex_set
    __swig_getmethods__["confIndex"] = _canparser.parser_t_confIndex_get
    if _newclass:confIndex = _swig_property(_canparser.parser_t_confIndex_get, _canparser.parser_t_confIndex_set)
    __swig_setmethods__["sensorFound"] = _canparser.parser_t_sensorFound_set
    __swig_getmethods__["sensorFound"] = _canparser.parser_t_sensorFound_get
    if _newclass:sensorFound = _swig_property(_canparser.parser_t_sensorFound_get, _canparser.parser_t_sensorFound_set)
    __swig_getmethods__["confLength"] = _canparser.parser_t_confLength_get
    if _newclass:confLength = _swig_property(_canparser.parser_t_confLength_get)
    __swig_setmethods__["config"] = _canparser.parser_t_config_set
    __swig_getmethods__["config"] = _canparser.parser_t_config_get
    if _newclass:config = _swig_property(_canparser.parser_t_config_get, _canparser.parser_t_config_set)
    def __init__(self): 
        this = _canparser.new_parser_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _canparser.delete_parser_t
    __del__ = lambda self : None;
parser_t_swigregister = _canparser.parser_t_swigregister
parser_t_swigregister(parser_t)

class sensor_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sensor_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sensor_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _canparser.sensor_t_name_set
    __swig_getmethods__["name"] = _canparser.sensor_t_name_get
    if _newclass:name = _swig_property(_canparser.sensor_t_name_get, _canparser.sensor_t_name_set)
    __swig_setmethods__["id"] = _canparser.sensor_t_id_set
    __swig_getmethods__["id"] = _canparser.sensor_t_id_get
    if _newclass:id = _swig_property(_canparser.sensor_t_id_get, _canparser.sensor_t_id_set)
    __swig_setmethods__["confIndex"] = _canparser.sensor_t_confIndex_set
    __swig_getmethods__["confIndex"] = _canparser.sensor_t_confIndex_get
    if _newclass:confIndex = _swig_property(_canparser.sensor_t_confIndex_get, _canparser.sensor_t_confIndex_set)
    __swig_setmethods__["value"] = _canparser.sensor_t_value_set
    __swig_getmethods__["value"] = _canparser.sensor_t_value_get
    if _newclass:value = _swig_property(_canparser.sensor_t_value_get, _canparser.sensor_t_value_set)
    def __init__(self): 
        this = _canparser.new_sensor_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _canparser.delete_sensor_t
    __del__ = lambda self : None;
sensor_t_swigregister = _canparser.sensor_t_swigregister
sensor_t_swigregister(sensor_t)

PARSER_FOUND = _canparser.PARSER_FOUND
PARSER_NEEDNEXT = _canparser.PARSER_NEEDNEXT
PARSER_NOMOREDATA = _canparser.PARSER_NOMOREDATA
PARSER_NOTHINGTODO = _canparser.PARSER_NOTHINGTODO

def parseNext(*args):
  return _canparser.parseNext(*args)
parseNext = _canparser.parseNext

def canfile2csv(*args):
  return _canparser.canfile2csv(*args)
canfile2csv = _canparser.canfile2csv
# This file is compatible with both classic and new-style classes.


